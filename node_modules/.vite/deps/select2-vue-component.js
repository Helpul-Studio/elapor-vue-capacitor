import "./chunk-HR75LNQF.js";
import {
  Fragment,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createTextVNode,
  defineComponent,
  nextTick,
  openBlock,
  renderList,
  resolveDynamicComponent,
  vModelText,
  withDirectives
} from "./chunk-BPE3C3HW.js";
import {
  normalizeClass,
  toDisplayString
} from "./chunk-A47ZK66O.js";
import "./chunk-OL3AADLO.js";

// node_modules/tslib/tslib.es6.js
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

// node_modules/select2-component/dist/index.js
var timeout = 200;
var unicodePatterns = [
  { l: "a", s: /[ⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐ]/gi },
  { l: "aa", s: /ꜳ/gi },
  { l: "ae", s: /[æǽǣ]/gi },
  { l: "ao", s: /ꜵ/gi },
  { l: "au", s: /ꜷ/gi },
  { l: "av", s: /[ꜹꜻ]/gi },
  { l: "ay", s: /ꜽ/gi },
  { l: "b", s: /[ⓑｂḃḅḇƀƃɓ]/gi },
  { l: "c", s: /[ⓒｃćĉċčçḉƈȼꜿↄ]/gi },
  { l: "d", s: /[ⓓｄḋďḍḑḓḏđƌɖɗꝺ]/gi },
  { l: "dz", s: /[ǳǆ]/gi },
  { l: "e", s: /[ⓔｅèéêềếễểẽēḕḗĕėëẻěȅȇẹệȩḝęḙḛɇɛǝ]/gi },
  { l: "f", s: /[ⓕｆḟƒꝼ]/gi },
  { l: "g", s: /[ⓖｇǵĝḡğġǧģǥɠꞡᵹꝿ]/gi },
  { l: "h", s: /[ⓗｈĥḣḧȟḥḩḫẖħⱨⱶɥ]/gi },
  { l: "hv", s: /ƕ/gi },
  { l: "i", s: /[ⓘｉìíîĩīĭİïḯỉǐȉȋịįḭɨı]/gi },
  { l: "j", s: /[ⓙｊĵǰɉ]/gi },
  { l: "k", s: /[ⓚｋḱǩḳķḵƙⱪꝁꝃꝅꞣ]/gi },
  { l: "l", s: /[ⓛｌŀĺľḷḹļḽḻſłƚɫⱡꝉꞁꝇꝆ]/gi },
  { l: "lj", s: /ǉ/gi },
  { l: "m", s: /[ⓜｍḿṁṃɱɯ]/gi },
  { l: "n", s: /[ⓝｎǹńñṅňṇņṋṉƞɲŉꞑꞥ]/gi },
  { l: "nj", s: /ǌ/gi },
  { l: "o", s: /[ⓞｏòóôồốỗổõṍȭṏōṑṓŏȯȱöȫỏőǒȍȏơờớỡởợọộǫǭøǿɔƟꝋꝍɵ]/gi },
  { l: "oi", s: /ƣ/gi },
  { l: "oe", s: /œ/gi },
  { l: "oo", s: /ꝏ/gi },
  { l: "ou", s: /ȣ/gi },
  { l: "p", s: /[ⓟｐṕṗƥᵽꝑꝓꝕ]/gi },
  { l: "q", s: /[ⓠｑɋꝗꝙ]/gi },
  { l: "r", s: /[ⓡｒŕṙřȑȓṛṝŗṟɍɽꝛꞧꞃ]/gi },
  { l: "s", s: /[ⓢｓßẞśṥŝṡšṧṣṩșşȿꞩꞅẛ]/gi },
  { l: "t", s: /[ⓣｔṫẗťṭțţṱṯŧƭʈⱦꞇ]/gi },
  { l: "tz", s: /ꜩ/gi },
  { l: "u", s: /[ⓤｕùúûũṹūṻŭüǜǘǖǚủůűǔȕȗưừứữửựụṳųṷṵʉ]/gi },
  { l: "v", s: /[ⓥｖṽṿʋꝟʌ]/gi },
  { l: "vy", s: /ꝡ/gi },
  { l: "w", s: /[ⓦｗẁẃŵẇẅẘẉⱳ]/gi },
  { l: "x", s: /[ⓧｘẋẍ]/gi },
  { l: "y", s: /[ⓨｙỳýŷỹȳẏÿỷẙỵƴɏỿ]/gi },
  { l: "z", s: /[ⓩｚźẑżžẓẕƶȥɀⱬꝣ]/gi }
];
function getScrollUpIndex(data, value) {
  var e_1, _a;
  var index = 0;
  try {
    for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
      var groupOrOption = data_1_1.value;
      var options = groupOrOption.options;
      if (options) {
        index++;
        var valueIndex = options.findIndex(function(op) {
          return op.value === value;
        });
        if (valueIndex !== -1) {
          return index + valueIndex;
        } else {
          index += options.length;
        }
      } else {
        if (groupOrOption.value === value) {
          return index;
        } else {
          index++;
        }
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (data_1_1 && !data_1_1.done && (_a = data_1.return))
        _a.call(data_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return 0;
}
function getOptionByValue(data, value) {
  var e_2, _a, e_3, _b;
  try {
    for (var data_2 = __values(data), data_2_1 = data_2.next(); !data_2_1.done; data_2_1 = data_2.next()) {
      var groupOrOption = data_2_1.value;
      var options = groupOrOption.options;
      if (options) {
        try {
          for (var options_1 = (e_3 = void 0, __values(options)), options_1_1 = options_1.next(); !options_1_1.done; options_1_1 = options_1.next()) {
            var option = options_1_1.value;
            if (option.value === value) {
              return option;
            }
          }
        } catch (e_3_1) {
          e_3 = { error: e_3_1 };
        } finally {
          try {
            if (options_1_1 && !options_1_1.done && (_b = options_1.return))
              _b.call(options_1);
          } finally {
            if (e_3)
              throw e_3.error;
          }
        }
      } else {
        if (groupOrOption.value === value) {
          return groupOrOption;
        }
      }
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (data_2_1 && !data_2_1.done && (_a = data_2.return))
        _a.call(data_2);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  return null;
}
function getOptionsByValue(data, value, multiple) {
  var e_4, _a;
  if (multiple) {
    var values = Array.isArray(value) ? value : [];
    var result = [];
    try {
      for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
        var v = values_1_1.value;
        var option = getOptionByValue(data, v);
        if (option) {
          result.push(option);
        }
      }
    } catch (e_4_1) {
      e_4 = { error: e_4_1 };
    } finally {
      try {
        if (values_1_1 && !values_1_1.done && (_a = values_1.return))
          _a.call(values_1);
      } finally {
        if (e_4)
          throw e_4.error;
      }
    }
    return result;
  }
  return getOptionByValue(data, value);
}
function getFirstAvailableOption(data) {
  var e_5, _a, e_6, _b;
  try {
    for (var data_3 = __values(data), data_3_1 = data_3.next(); !data_3_1.done; data_3_1 = data_3.next()) {
      var groupOrOption = data_3_1.value;
      var options = groupOrOption.options;
      if (options) {
        try {
          for (var options_2 = (e_6 = void 0, __values(options)), options_2_1 = options_2.next(); !options_2_1.done; options_2_1 = options_2.next()) {
            var option = options_2_1.value;
            if (!option.disabled) {
              return option.value;
            }
          }
        } catch (e_6_1) {
          e_6 = { error: e_6_1 };
        } finally {
          try {
            if (options_2_1 && !options_2_1.done && (_b = options_2.return))
              _b.call(options_2);
          } finally {
            if (e_6)
              throw e_6.error;
          }
        }
      } else {
        var option = groupOrOption;
        if (!option.disabled) {
          return option.value;
        }
      }
    }
  } catch (e_5_1) {
    e_5 = { error: e_5_1 };
  } finally {
    try {
      if (data_3_1 && !data_3_1.done && (_a = data_3.return))
        _a.call(data_3);
    } finally {
      if (e_5)
        throw e_5.error;
    }
  }
  return null;
}
function getOptionsCount(data) {
  var e_7, _a;
  var count = 0;
  try {
    for (var data_4 = __values(data), data_4_1 = data_4.next(); !data_4_1.done; data_4_1 = data_4.next()) {
      var groupOrOption = data_4_1.value;
      var options = groupOrOption.options;
      if (options) {
        count += options.length;
      } else {
        count++;
      }
    }
  } catch (e_7_1) {
    e_7 = { error: e_7_1 };
  } finally {
    try {
      if (data_4_1 && !data_4_1.done && (_a = data_4.return))
        _a.call(data_4);
    } finally {
      if (e_7)
        throw e_7.error;
    }
  }
  return count;
}
function valueIsNotInFilteredData(filteredData, value) {
  var e_8, _a, e_9, _b;
  if (isNullOrUndefined(value)) {
    return true;
  }
  try {
    for (var filteredData_1 = __values(filteredData), filteredData_1_1 = filteredData_1.next(); !filteredData_1_1.done; filteredData_1_1 = filteredData_1.next()) {
      var groupOrOption = filteredData_1_1.value;
      var options = groupOrOption.options;
      if (options) {
        try {
          for (var options_3 = (e_9 = void 0, __values(options)), options_3_1 = options_3.next(); !options_3_1.done; options_3_1 = options_3.next()) {
            var option = options_3_1.value;
            if (option.value === value) {
              return false;
            }
          }
        } catch (e_9_1) {
          e_9 = { error: e_9_1 };
        } finally {
          try {
            if (options_3_1 && !options_3_1.done && (_b = options_3.return))
              _b.call(options_3);
          } finally {
            if (e_9)
              throw e_9.error;
          }
        }
      } else {
        if (groupOrOption.value === value) {
          return false;
        }
      }
    }
  } catch (e_8_1) {
    e_8 = { error: e_8_1 };
  } finally {
    try {
      if (filteredData_1_1 && !filteredData_1_1.done && (_a = filteredData_1.return))
        _a.call(filteredData_1);
    } finally {
      if (e_8)
        throw e_8.error;
    }
  }
  return true;
}
function getPreviousOption(filteredData, hoveringValue) {
  var findIt = isNullOrUndefined(hoveringValue);
  for (var i = filteredData.length - 1; i >= 0; i--) {
    var groupOrOption = filteredData[i];
    var options = groupOrOption.options;
    if (options) {
      for (var j = options.length - 1; j >= 0; j--) {
        var option = options[j];
        if (findIt && !option.disabled) {
          return option.value;
        }
        findIt = option.value === hoveringValue;
      }
    } else {
      var option = groupOrOption;
      if (findIt && !option.disabled) {
        return option.value;
      }
      findIt = option.value === hoveringValue;
    }
  }
  return findIt ? hoveringValue : null;
}
function getNextOption(filteredData, hoveringValue) {
  var e_10, _a, e_11, _b;
  var findIt = isNullOrUndefined(hoveringValue);
  try {
    for (var filteredData_2 = __values(filteredData), filteredData_2_1 = filteredData_2.next(); !filteredData_2_1.done; filteredData_2_1 = filteredData_2.next()) {
      var groupOrOption = filteredData_2_1.value;
      var options = groupOrOption.options;
      if (options) {
        try {
          for (var options_4 = (e_11 = void 0, __values(options)), options_4_1 = options_4.next(); !options_4_1.done; options_4_1 = options_4.next()) {
            var option = options_4_1.value;
            if (findIt) {
              if (!option.disabled) {
                return option.value;
              }
            } else {
              findIt = option.value === hoveringValue;
            }
          }
        } catch (e_11_1) {
          e_11 = { error: e_11_1 };
        } finally {
          try {
            if (options_4_1 && !options_4_1.done && (_b = options_4.return))
              _b.call(options_4);
          } finally {
            if (e_11)
              throw e_11.error;
          }
        }
      } else {
        var option = groupOrOption;
        if (findIt) {
          if (!option.disabled) {
            return option.value;
          }
        } else {
          findIt = option.value === hoveringValue;
        }
      }
    }
  } catch (e_10_1) {
    e_10 = { error: e_10_1 };
  } finally {
    try {
      if (filteredData_2_1 && !filteredData_2_1.done && (_a = filteredData_2.return))
        _a.call(filteredData_2);
    } finally {
      if (e_10)
        throw e_10.error;
    }
  }
  return findIt ? hoveringValue : null;
}
function isNullOrUndefined(value) {
  return value === null || value === void 0;
}
function getLastScrollTopIndex(hoveringValue, results, filteredData, lastScrollTopIndex) {
  if (isNullOrUndefined(hoveringValue)) {
    results.scrollTop = 0;
    return 0;
  } else {
    var scrollTop = getScrollUpIndex(filteredData, hoveringValue);
    if (scrollTop - lastScrollTopIndex > 5) {
      lastScrollTopIndex += scrollTop - lastScrollTopIndex - 5;
      var item = results.querySelectorAll("li").item(scrollTop);
      if (item) {
        results.scrollTop = item.offsetTop - results.offsetHeight;
      }
      return lastScrollTopIndex;
    }
    if (lastScrollTopIndex - scrollTop > 0) {
      lastScrollTopIndex -= lastScrollTopIndex - scrollTop;
      var item = results.querySelectorAll("li").item(lastScrollTopIndex - 1);
      if (item) {
        results.scrollTop = item.offsetTop;
      }
      return lastScrollTopIndex;
    }
    return null;
  }
}
function containSearchText(label, searchText, editPattern) {
  return searchText ? formatSansUnicode(label).match(new RegExp(formatPattern(searchText, editPattern), "i")) !== null : true;
}
function protectPattern(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}
function formatSansUnicode(str) {
  var e_12, _a;
  try {
    for (var unicodePatterns_1 = __values(unicodePatterns), unicodePatterns_1_1 = unicodePatterns_1.next(); !unicodePatterns_1_1.done; unicodePatterns_1_1 = unicodePatterns_1.next()) {
      var unicodePattern = unicodePatterns_1_1.value;
      str = str.replace(unicodePattern.s, unicodePattern.l);
    }
  } catch (e_12_1) {
    e_12 = { error: e_12_1 };
  } finally {
    try {
      if (unicodePatterns_1_1 && !unicodePatterns_1_1.done && (_a = unicodePatterns_1.return))
        _a.call(unicodePatterns_1);
    } finally {
      if (e_12)
        throw e_12.error;
    }
  }
  return str;
}
function formatPattern(str, editPattern) {
  str = formatSansUnicode(protectPattern(str));
  if (editPattern && typeof editPattern === "function") {
    str = editPattern(str);
  }
  return str;
}
function getFilteredData(data, searchText, editPattern) {
  var e_13, _a;
  if (searchText) {
    var result = [];
    try {
      for (var data_5 = __values(data), data_5_1 = data_5.next(); !data_5_1.done; data_5_1 = data_5.next()) {
        var groupOrOption = data_5_1.value;
        var options = groupOrOption.options;
        if (options) {
          if (options.some(function(group) {
            return containSearchText(group.label, searchText, editPattern);
          })) {
            var filteredOptions = options.filter(function(group) {
              return containSearchText(group.label, searchText, editPattern);
            });
            result.push({
              label: groupOrOption.label,
              options: filteredOptions
            });
          }
        } else if (containSearchText(groupOrOption.label, searchText, editPattern)) {
          result.push(groupOrOption);
        }
      }
    } catch (e_13_1) {
      e_13 = { error: e_13_1 };
    } finally {
      try {
        if (data_5_1 && !data_5_1.done && (_a = data_5.return))
          _a.call(data_5);
      } finally {
        if (e_13)
          throw e_13.error;
      }
    }
    return result;
  } else {
    return data;
  }
}
function getOptionStyle(option, hoveringValue) {
  var extraClasses = option.classes ? " " + option.classes : "";
  return option.value === hoveringValue ? "select2-results__option select2-results__option--highlighted" + extraClasses : "select2-results__option" + extraClasses;
}
function getDropdownStyle(isOpen) {
  return isOpen ? "select2-container select2-container--default select2-container-dropdown select2-container--open" : "select2-container select2-container--default select2-container-dropdown";
}
function getContainerStyle(disabled, isOpen) {
  if (disabled === void 0) {
    disabled = void 0;
  }
  return "select2 select2-container select2-container--default " + (disabled ? "select2-container--disabled" : "") + " " + ((isOpen ? "select2-container--open" : "") + " select2-container--below select2-container--focus");
}
function getSelectionStyle(multiple) {
  if (multiple === void 0) {
    multiple = void 0;
  }
  return "select2-selection select2-selection--" + (multiple ? "multiple" : "single");
}
var defaultMinCountForSearch = 6;
function isSearchboxHiddex(data, minCountForSearch) {
  if (typeof minCountForSearch !== "number") {
    minCountForSearch = defaultMinCountForSearch;
  }
  var optionCount = getOptionsCount(data);
  return optionCount < minCountForSearch;
}
function getSearchStyle(isHidden) {
  return isHidden ? "select2-search select2-search--dropdown select2-search--hide" : "select2-search select2-search--dropdown";
}
function isSelected(options, option, multiple) {
  if (multiple) {
    return options && options.some(function(op) {
      return op.value === option.value;
    }) ? "true" : "false";
  } else {
    return options && option.value === options.value ? "true" : "false";
  }
}
function removeSelection(options, option) {
  for (var i = 0; i < options.length; i++) {
    if (options[i].value === option.value) {
      options.splice(i, 1);
      return;
    }
  }
}

// node_modules/select2-vue-component/dist/variables.js
function autoCompleteTemplateHtml(_ctx, _cache) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.containerStyle)
  }, [
    createBaseVNode("div", { class: "selection" }, [
      createBaseVNode("div", { class: "select2-search select2-search--dropdown" }, [
        createBaseVNode("input", {
          ref: "searchInput",
          value: _ctx.value,
          onInput: _cache[0] || (_cache[0] = function($event) {
            return _ctx.onChange($event);
          }),
          onKeydown: _cache[1] || (_cache[1] = function($event) {
            return _ctx.keyDown($event);
          }),
          onKeyup: _cache[2] || (_cache[2] = function($event) {
            return _ctx.keyUp($event);
          }),
          onKeypress: _cache[3] || (_cache[3] = function($event) {
            return _ctx.keyPress($event);
          }),
          onFocusout: _cache[4] || (_cache[4] = function($event) {
            return _ctx.focusout();
          }),
          onClick: _cache[5] || (_cache[5] = function($event) {
            return _ctx.toggleOpenAndClose();
          }),
          class: "select2-search__field",
          type: "search",
          role: "textbox",
          autocomplete: "off",
          autocorrect: "off",
          autocapitalize: "off",
          spellcheck: "false"
        }, null, 40, ["value"])
      ])
    ]),
    createBaseVNode("div", {
      class: normalizeClass(_ctx.dropdownStyle)
    }, [
      createBaseVNode("div", { class: "select2-dropdown" }, [
        createBaseVNode("div", { class: "select2-results" }, [
          createBaseVNode("ul", {
            ref: "results",
            class: "select2-results__options",
            role: "tree",
            tabindex: "-1",
            onKeydown: _cache[6] || (_cache[6] = function($event) {
              return _ctx.keyDown($event);
            }),
            onFocusout: _cache[7] || (_cache[7] = function($event) {
              return _ctx.focusout();
            })
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.filteredData, function(groupOrOption, i) {
              return openBlock(), createElementBlock(Fragment, null, [
                groupOrOption.options ? (openBlock(), createElementBlock("li", {
                  key: 0,
                  class: "select2-results__option",
                  role: "group"
                }, [
                  createBaseVNode("strong", { class: "select2-results__group" }, toDisplayString(groupOrOption.label), 1),
                  createBaseVNode("ul", { class: "select2-results__options select2-results__options--nested" }, [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(groupOrOption.options, function(option, j) {
                      return openBlock(), createElementBlock("li", {
                        key: j,
                        class: normalizeClass(_ctx.getOptionStyle(option)),
                        role: "treeitem",
                        "aria-selected": _ctx.isSelected(option),
                        "aria-disabled": _ctx.isDisabled(option),
                        onMouseenter: function($event) {
                          return _ctx.mouseenter(option);
                        },
                        onClick: function($event) {
                          return _ctx.click(option);
                        }
                      }, [
                        option.component ? (openBlock(), createBlock(resolveDynamicComponent(option.component), {
                          key: 0,
                          option
                        }, null, 8, ["option"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                          createTextVNode(toDisplayString(option.label), 1)
                        ], 2112))
                      ], 42, ["aria-selected", "aria-disabled", "onMouseenter", "onClick"]);
                    }), 128))
                  ])
                ])) : (openBlock(), createElementBlock("li", {
                  key: 1,
                  class: normalizeClass(_ctx.getOptionStyle(groupOrOption)),
                  role: "treeitem",
                  "aria-selected": _ctx.isSelected(groupOrOption),
                  "aria-disabled": _ctx.isDisabled(groupOrOption),
                  onMouseenter: function($event) {
                    return _ctx.mouseenter(groupOrOption);
                  },
                  onClick: function($event) {
                    return _ctx.click(groupOrOption);
                  }
                }, [
                  groupOrOption.component ? (openBlock(), createBlock(resolveDynamicComponent(groupOrOption.component), {
                    key: 0,
                    option: groupOrOption
                  }, null, 8, ["option"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                    createTextVNode(toDisplayString(groupOrOption.label), 1)
                  ], 2112))
                ], 42, ["aria-selected", "aria-disabled", "onMouseenter", "onClick"]))
              ], 64);
            }), 256))
          ], 544)
        ])
      ])
    ], 2)
  ], 2);
}
function select2TemplateHtml(_ctx, _cache) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.containerStyle)
  }, [
    createBaseVNode("div", {
      class: "selection",
      onClick: _cache[0] || (_cache[0] = function($event) {
        return _ctx.toggleOpenAndClose();
      })
    }, [
      createBaseVNode("div", {
        class: normalizeClass(_ctx.selectionStyle),
        role: "combobox"
      }, [
        !_ctx.multiple ? (openBlock(), createElementBlock("span", {
          key: 0,
          class: "select2-selection__rendered",
          title: _ctx.option ? _ctx.option.label : ""
        }, [
          _ctx.option ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            _ctx.option.component ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.option.component), {
              key: 0,
              option: _ctx.option
            }, null, 8, ["option"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.option.label), 1)
            ], 2112))
          ], 2112)) : (openBlock(), createElementBlock("span", {
            key: 1,
            class: "select2-selection__placeholder"
          }, toDisplayString(_ctx.placeholder), 1))
        ], 8, ["title"])) : createCommentVNode("v-if", true),
        !_ctx.multiple ? (openBlock(), createElementBlock("span", {
          key: 1,
          class: "select2-selection__arrow",
          role: "presentation"
        }, [
          createBaseVNode("b", { role: "presentation" })
        ])) : createCommentVNode("v-if", true),
        _ctx.multiple ? (openBlock(), createElementBlock("ul", {
          key: 2,
          class: "select2-selection__rendered"
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.option, function(op, i) {
            return openBlock(), createElementBlock("li", {
              key: i,
              class: "select2-selection__choice",
              title: op.label
            }, [
              createBaseVNode("span", {
                onClick: function($event) {
                  return _ctx.removeSelection($event, op);
                },
                class: "select2-selection__choice__remove",
                role: "presentation"
              }, "\xD7", 8, ["onClick"]),
              createTextVNode(" " + toDisplayString(op.label), 1)
            ], 8, ["title"]);
          }), 128))
        ])) : createCommentVNode("v-if", true)
      ], 2)
    ]),
    createBaseVNode("div", {
      class: normalizeClass(_ctx.dropdownStyle)
    }, [
      createBaseVNode("div", { class: "select2-dropdown select2-dropdown--below" }, [
        createBaseVNode("div", {
          class: normalizeClass(_ctx.searchStyle)
        }, [
          withDirectives(createBaseVNode("input", {
            ref: "searchInput",
            "onUpdate:modelValue": _cache[1] || (_cache[1] = function($event) {
              return _ctx.searchText = $event;
            }),
            onKeydown: _cache[2] || (_cache[2] = function($event) {
              return _ctx.keyDown($event);
            }),
            onKeyup: _cache[3] || (_cache[3] = function($event) {
              return _ctx.keyUp($event);
            }),
            onKeypress: _cache[4] || (_cache[4] = function($event) {
              return _ctx.keyPress($event);
            }),
            onFocus: _cache[5] || (_cache[5] = function($event) {
              return _ctx.cancelFocusoutTimer();
            }),
            onFocusout: _cache[6] || (_cache[6] = function($event) {
              return _ctx.focusout();
            }),
            class: "select2-search__field",
            type: "search",
            role: "textbox",
            autocomplete: "off",
            autocorrect: "off",
            autocapitalize: "off",
            maxlength: _ctx.maximumInputLength,
            spellcheck: "false"
          }, null, 40, ["maxlength"]), [
            [vModelText, _ctx.searchText]
          ])
        ], 2),
        createBaseVNode("div", { class: "select2-results" }, [
          createBaseVNode("ul", {
            ref: "results",
            class: "select2-results__options",
            role: "tree",
            tabindex: "-1",
            onKeydown: _cache[7] || (_cache[7] = function($event) {
              return _ctx.keyDown($event);
            }),
            onFocus: _cache[8] || (_cache[8] = function($event) {
              return _ctx.cancelFocusoutTimer();
            }),
            onFocusout: _cache[9] || (_cache[9] = function($event) {
              return _ctx.focusout();
            })
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.filteredData, function(groupOrOption, i) {
              return openBlock(), createElementBlock(Fragment, null, [
                groupOrOption.options ? (openBlock(), createElementBlock("li", {
                  key: 0,
                  class: "select2-results__option",
                  role: "group"
                }, [
                  createBaseVNode("strong", { class: "select2-results__group" }, toDisplayString(groupOrOption.label), 1),
                  createBaseVNode("ul", { class: "select2-results__options select2-results__options--nested" }, [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(groupOrOption.options, function(option, j) {
                      return openBlock(), createElementBlock("li", {
                        key: j,
                        class: normalizeClass(_ctx.getOptionStyle(option)),
                        role: "treeitem",
                        "aria-selected": _ctx.isSelected(option),
                        "aria-disabled": _ctx.isDisabled(option),
                        onMouseenter: function($event) {
                          return _ctx.mouseenter(option);
                        },
                        onClick: function($event) {
                          return _ctx.click(option);
                        }
                      }, [
                        option.component ? (openBlock(), createBlock(resolveDynamicComponent(option.component), {
                          key: 0,
                          option
                        }, null, 8, ["option"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                          createTextVNode(toDisplayString(option.label), 1)
                        ], 2112))
                      ], 42, ["aria-selected", "aria-disabled", "onMouseenter", "onClick"]);
                    }), 128))
                  ])
                ])) : (openBlock(), createElementBlock("li", {
                  key: 1,
                  class: normalizeClass(_ctx.getOptionStyle(groupOrOption)),
                  role: "treeitem",
                  "aria-selected": _ctx.isSelected(groupOrOption),
                  "aria-disabled": _ctx.isDisabled(groupOrOption),
                  onMouseenter: function($event) {
                    return _ctx.mouseenter(groupOrOption);
                  },
                  onClick: function($event) {
                    return _ctx.click(groupOrOption);
                  }
                }, [
                  groupOrOption.component ? (openBlock(), createBlock(resolveDynamicComponent(groupOrOption.component), {
                    key: 0,
                    option: groupOrOption
                  }, null, 8, ["option"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                    createTextVNode(toDisplayString(groupOrOption.label), 1)
                  ], 2112))
                ], 42, ["aria-selected", "aria-disabled", "onMouseenter", "onClick"]))
              ], 64);
            }), 256))
          ], 544)
        ])
      ])
    ], 2)
  ], 2);
}

// node_modules/select2-vue-component/dist/select2.js
var Select2 = defineComponent({
  render: select2TemplateHtml,
  props: {
    data: {
      type: Array,
      required: true
    },
    value: [String, Number, Boolean, Array],
    disabled: Boolean,
    minCountForSearch: Number,
    placeholder: String,
    customSearchEnabled: Boolean,
    multiple: Boolean,
    minimumInputLength: Number,
    maximumInputLength: Number,
    keepSearchText: Boolean
  },
  data: function() {
    return {
      option: null,
      hoveringValue: null,
      isOpen: false,
      focusoutTimer: void 0,
      innerSearchText: "",
      lastScrollTopIndex: 0,
      searchInputElement: void 0,
      resultsElement: void 0
    };
  },
  computed: {
    searchText: {
      get: function() {
        return this.innerSearchText;
      },
      set: function(text) {
        if (this.customSearchEnabled) {
          this.$emit("search", text);
        }
        this.innerSearchText = text;
      }
    },
    dropdownStyle: function() {
      return getDropdownStyle(this.isOpen);
    },
    filteredData: function() {
      var result = this.customSearchEnabled || this.minimumInputLength && this.minimumInputLength > this.searchText.length ? this.data : getFilteredData(this.data, this.searchText);
      if (valueIsNotInFilteredData(result, this.hoveringValue)) {
        this.hoveringValue = getFirstAvailableOption(result);
        if (this.resultsElement) {
          var lastScrollTopIndex = getLastScrollTopIndex(this.hoveringValue, this.resultsElement, result, this.lastScrollTopIndex);
          if (lastScrollTopIndex !== null) {
            this.lastScrollTopIndex = lastScrollTopIndex;
          }
        }
      }
      return result;
    },
    containerStyle: function() {
      return getContainerStyle(this.disabled, this.isOpen);
    },
    selectionStyle: function() {
      return getSelectionStyle(this.multiple);
    },
    isSearchboxHidden: function() {
      return this.customSearchEnabled ? false : isSearchboxHiddex(this.data, this.minCountForSearch);
    },
    searchStyle: function() {
      return getSearchStyle(this.isSearchboxHidden);
    }
  },
  beforeMount: function() {
    var option = getOptionsByValue(this.data, this.value, this.multiple);
    if (option !== null) {
      this.option = option;
    }
    if (!Array.isArray(option)) {
      this.hoveringValue = this.value;
    }
  },
  mounted: function() {
    var _this = this;
    this.searchInputElement = this.$refs.searchInput;
    this.resultsElement = this.$refs.results;
    this.$watch("value", function() {
      var option = getOptionsByValue(_this.data, _this.value, _this.multiple);
      _this.option = option;
      if (!Array.isArray(option)) {
        _this.hoveringValue = _this.value;
      }
    });
  },
  beforeUnmount: function() {
    this.cancelFocusoutTimer();
  },
  methods: {
    getOptionStyle: function(option) {
      return getOptionStyle(option, this.hoveringValue);
    },
    mouseenter: function(option) {
      if (!option.disabled) {
        this.hoveringValue = option.value;
      }
    },
    click: function(option) {
      if (!option.disabled) {
        this.select(option);
      }
      if (this.focusoutTimer) {
        clearTimeout(this.focusoutTimer);
      }
    },
    toggleOpenAndClose: function() {
      var _this = this;
      if (this.disabled) {
        return;
      }
      this.isOpen = !this.isOpen;
      if (this.isOpen) {
        if (!this.keepSearchText) {
          this.innerSearchText = "";
        }
        nextTick(function() {
          _this.focusSearchboxOrResultsElement();
          if (_this.resultsElement) {
            var lastScrollTopIndex = getLastScrollTopIndex(_this.hoveringValue, _this.resultsElement, _this.data, _this.lastScrollTopIndex);
            if (lastScrollTopIndex !== null) {
              _this.lastScrollTopIndex = lastScrollTopIndex;
            }
          }
        });
        this.$emit("open");
      }
      if (this.focusoutTimer) {
        clearTimeout(this.focusoutTimer);
      }
    },
    focusout: function() {
      var _this = this;
      this.focusoutTimer = setTimeout(function() {
        _this.isOpen = false;
        _this.focusoutTimer = void 0;
      }, timeout);
    },
    select: function(option) {
      if (option !== null) {
        if (this.multiple) {
          var options = this.option;
          var index = options.findIndex(function(op) {
            return op.value === option.value;
          });
          if (index === -1) {
            options.push(option);
          } else {
            options.splice(index, 1);
          }
        } else {
          this.option = option;
          this.isOpen = false;
        }
      }
      this.$emit("update", this.multiple ? this.option.map(function(op) {
        return op.value;
      }) : this.option.value);
    },
    keyDown: function(e) {
      this.$emit("keydown", e);
      if (e.keyCode === 40) {
        this.moveDown();
        e.preventDefault();
      } else if (e.keyCode === 38) {
        this.moveUp();
        e.preventDefault();
      } else if (e.keyCode === 13) {
        this.selectByEnter();
        e.preventDefault();
      }
    },
    keyUp: function(e) {
      this.$emit("keyup", e);
    },
    keyPress: function(e) {
      this.$emit("keypress", e);
    },
    isSelected: function(option) {
      return isSelected(this.option, option, this.multiple);
    },
    isDisabled: function(option) {
      return option.disabled ? "true" : "false";
    },
    removeSelection: function(e, option) {
      var _this = this;
      removeSelection(this.option, option);
      this.$emit("update", this.option.map(function(op) {
        return op.value;
      }));
      e.preventDefault();
      e.stopPropagation();
      if (this.isOpen) {
        nextTick(function() {
          _this.focusSearchboxOrResultsElement();
        });
      }
      if (this.focusoutTimer) {
        clearTimeout(this.focusoutTimer);
      }
    },
    focusSearchboxOrResultsElement: function() {
      if (!this.isSearchboxHidden) {
        if (this.searchInputElement) {
          this.searchInputElement.focus();
        }
      } else {
        if (this.resultsElement) {
          this.resultsElement.focus();
        }
      }
    },
    moveUp: function() {
      this.hoveringValue = getPreviousOption(this.filteredData, this.hoveringValue);
      if (this.resultsElement) {
        var lastScrollTopIndex = getLastScrollTopIndex(this.hoveringValue, this.resultsElement, this.filteredData, this.lastScrollTopIndex);
        if (lastScrollTopIndex !== null) {
          this.lastScrollTopIndex = lastScrollTopIndex;
        }
      }
    },
    moveDown: function() {
      this.hoveringValue = getNextOption(this.filteredData, this.hoveringValue);
      if (this.resultsElement) {
        var lastScrollTopIndex = getLastScrollTopIndex(this.hoveringValue, this.resultsElement, this.filteredData, this.lastScrollTopIndex);
        if (lastScrollTopIndex !== null) {
          this.lastScrollTopIndex = lastScrollTopIndex;
        }
      }
    },
    selectByEnter: function() {
      if (this.hoveringValue) {
        var option = getOptionByValue(this.data, this.hoveringValue);
        this.select(option);
      }
    },
    cancelFocusoutTimer: function() {
      if (this.focusoutTimer) {
        clearTimeout(this.focusoutTimer);
      }
    }
  }
});

// node_modules/select2-vue-component/dist/auto-complete.js
var AutoComplete = defineComponent({
  render: autoCompleteTemplateHtml,
  props: {
    data: {
      type: Array,
      required: true
    },
    value: [String, Number, Boolean, Array]
  },
  data: function() {
    return {
      option: null,
      hoveringValue: null,
      isOpen: false,
      focusoutTimer: void 0,
      lastScrollTopIndex: 0,
      searchInputElement: void 0,
      resultsElement: void 0
    };
  },
  computed: {
    dropdownStyle: function() {
      return getDropdownStyle(this.isOpen && this.data.length > 0);
    },
    filteredData: function() {
      var result = this.data;
      if (valueIsNotInFilteredData(result, this.hoveringValue)) {
        this.hoveringValue = getFirstAvailableOption(result);
        if (this.resultsElement) {
          var lastScrollTopIndex = getLastScrollTopIndex(this.hoveringValue, this.resultsElement, result, this.lastScrollTopIndex);
          if (lastScrollTopIndex !== null) {
            this.lastScrollTopIndex = lastScrollTopIndex;
          }
        }
      }
      return result;
    },
    containerStyle: function() {
      return getContainerStyle(false, this.isOpen && this.data.length > 0);
    }
  },
  beforeMount: function() {
    var option = getOptionsByValue(this.data, this.value, false);
    if (option !== null) {
      this.option = option;
    }
    if (!Array.isArray(option)) {
      this.hoveringValue = this.value;
    }
  },
  mounted: function() {
    this.searchInputElement = this.$refs.searchInput;
    this.resultsElement = this.$refs.results;
  },
  methods: {
    getOptionStyle: function(option) {
      return getOptionStyle(option, this.hoveringValue);
    },
    mouseenter: function(option) {
      if (!option.disabled) {
        this.hoveringValue = option.value;
      }
    },
    click: function(option) {
      if (!option.disabled) {
        this.select(option);
      }
      if (this.focusoutTimer) {
        clearTimeout(this.focusoutTimer);
      }
    },
    toggleOpenAndClose: function() {
      var _this = this;
      this.isOpen = !this.isOpen;
      if (this.isOpen) {
        nextTick(function() {
          _this.focusSearchboxOrResultsElement();
          if (_this.resultsElement) {
            var lastScrollTopIndex = getLastScrollTopIndex(_this.hoveringValue, _this.resultsElement, _this.data, _this.lastScrollTopIndex);
            if (lastScrollTopIndex !== null) {
              _this.lastScrollTopIndex = lastScrollTopIndex;
            }
          }
        });
      }
      if (this.focusoutTimer) {
        clearTimeout(this.focusoutTimer);
      }
    },
    focusout: function() {
      var _this = this;
      this.focusoutTimer = setTimeout(function() {
        _this.isOpen = false;
        _this.focusoutTimer = void 0;
      }, timeout);
    },
    select: function(option) {
      if (option !== null) {
        this.option = option;
        this.isOpen = false;
      }
      this.$emit("select", this.option.value);
      this.$emit("update", this.option.value);
    },
    keyDown: function(e) {
      this.$emit("keydown", e);
      if (e.keyCode === 40) {
        this.moveDown();
        e.preventDefault();
      } else if (e.keyCode === 38) {
        this.moveUp();
        e.preventDefault();
      } else if (e.keyCode === 13) {
        this.selectByEnter();
        e.preventDefault();
      }
    },
    keyUp: function(e) {
      this.$emit("keyup", e);
    },
    keyPress: function(e) {
      this.$emit("keypress", e);
    },
    onChange: function(e) {
      this.$emit("search", e.target.value);
      this.$emit("update", e.target.value);
    },
    isSelected: function(option) {
      return isSelected(this.option, option, false);
    },
    isDisabled: function(option) {
      return option.disabled ? "true" : "false";
    },
    removeSelection: function(e, option) {
      var _this = this;
      removeSelection(this.option, option);
      this.$emit("update", this.option.map(function(op) {
        return op.value;
      }));
      e.preventDefault();
      e.stopPropagation();
      if (this.isOpen) {
        nextTick(function() {
          _this.focusSearchboxOrResultsElement();
        });
      }
      if (this.focusoutTimer) {
        clearTimeout(this.focusoutTimer);
      }
    },
    focusSearchboxOrResultsElement: function() {
      if (this.searchInputElement) {
        this.searchInputElement.focus();
      }
    },
    moveUp: function() {
      this.hoveringValue = getPreviousOption(this.filteredData, this.hoveringValue);
      if (this.resultsElement) {
        var lastScrollTopIndex = getLastScrollTopIndex(this.hoveringValue, this.resultsElement, this.filteredData, this.lastScrollTopIndex);
        if (lastScrollTopIndex !== null) {
          this.lastScrollTopIndex = lastScrollTopIndex;
        }
      }
    },
    moveDown: function() {
      this.hoveringValue = getNextOption(this.filteredData, this.hoveringValue);
      if (this.resultsElement) {
        var lastScrollTopIndex = getLastScrollTopIndex(this.hoveringValue, this.resultsElement, this.filteredData, this.lastScrollTopIndex);
        if (lastScrollTopIndex !== null) {
          this.lastScrollTopIndex = lastScrollTopIndex;
        }
      }
    },
    selectByEnter: function() {
      if (this.hoveringValue) {
        var option = getOptionByValue(this.data, this.hoveringValue);
        this.select(option);
      }
    }
  }
});
export {
  AutoComplete,
  Select2,
  getContainerStyle,
  getDropdownStyle,
  getFilteredData,
  getFirstAvailableOption,
  getLastScrollTopIndex,
  getNextOption,
  getOptionByValue,
  getOptionStyle,
  getOptionsByValue,
  getPreviousOption,
  getSearchStyle,
  getSelectionStyle,
  isSearchboxHiddex,
  isSelected,
  removeSelection,
  timeout,
  valueIsNotInFilteredData
};
//# sourceMappingURL=select2-vue-component.js.map
